
1. 修改错误的提交信息（commit message）

	提交信息很长时间内会一直保留在你的代码库（code base）中，
所以你肯定希望通过这个信息正确地了解代码修改情况。 下面这个命
令可以让你编辑最近一次的提交信息，但是你必须确保没有对当前的
代码库（working copy）做修改，否则这些修改也会随之一起提交。

	$ git commit --amend -m ”YOUR-NEW-COMMIT-MESSAGE”

	假如你已经将代码提交（git commit）推送（git push）到了远
程分支，那么你需要通过下面的命令强制推送这次的代码提交。

	$ git push <remote> <branch> --force

	
2. 提交之前撤销git add

	如果你往暂存区（staging area）中加入了一些错误的文件，
但是还没有提交代码。你可以使用一条简单的命令就可以撤销。
如果只需要移除一个文件，那么请输入：

	$ git reset <文件名>

	或者如果你想从暂存区移除所有没有提交的修改：

	$ git reset
	
3. 撤销最近一次代码提交

有时候你可能会不小心提交了错误的文件或一开始就遗漏了某些东西。下面这三步操作可以帮助你解决这个问题。

?
1	$ git reset --soft HEAD~1
2	# 对工作文件进行必要的更改
3	$ git add -A .
4	$ git commit -c ORIG_HEAD




你执行第一个命令时，Git会将HEAD指针（pointer）后移到此前的一次提交，之后你才能移动文件或作必要的修改。

然后你就可以添加所有的修改，而且当你执行最后的命令时，Git会打开你的默认文本编辑器，其中会包含上一次提交时的信息。如果愿意的话，你可以修改提交信息，或者你也可以在最后的命令中使用-C而不是-c，来跳过这一步。

4. Git仓库撤销至前一次提交时的状态

“撤销”（revert）在许多情况下是非常有必要的――尤其是你把代码搞的一团糟的情况下。最常见的情况是，你想回到之前代码版本，检查下那个时候的代码库，然后再回到现在状态。这可以通过下面的命令实现：

$ git checkout <SHA>
“”是你想查看的提交拥有的哈希值（Hash Code）中前8至10个字符。 这个命令会使<HEAD>指针脱离（detach），可以让你在不检出（check out）任何分支的情况下查看代码――脱离HEAD并不像听上去那么可怕。如果你想在这种情况下提交修改，你可以通过创建新的分支来实现：

$ git checkout -b <SHA>
要想回到当前的工作进度，只需要检出（check out）你之前所在的分支即可。

5. 撤销合并（Merge）

要想撤销合并，你可能必须要使用恢复命令（HARD RESET）回到上一次提交的状态。“合并”所做的工作基本上就是重置索引，更新working tree（工作树）中的不同文件，即当前提交（）代码中与HEAD游标所指向代码之间的不同文件；但是合并会保留索引与working tree之间的差异部分（例如那些没有被追踪的修改）。

$ git checkout -b <SHA>
当然，Git中总是有其他的实现办法，你可以查看看这篇文章继续了解。

6. 从当前Git分支移除未追踪的本地文件

假设你凑巧有一些未被追踪的文件（因为不再需要它们），不想每次使用git status命令时让它们显示出来。下面是解决这个问题的一些方法：

1$ git clean -f -n         # 1
2$ git clean -f            # 2
3$ git clean -fd           # 3
4$ git clean -fX           # 4
5$ git clean -fx           # 5

(1): 选项-n将显示执行（2）时将会移除哪些文件。
(2): 该命令会移除所有命令（1）中显示的文件。
(3): 如果你还想移除文件件，请使用选项-d。
(4): 如果你只想移除已被忽略的文件，请使用选项-X。
(5): 如果你想移除已被忽略和未被忽略的文件，请使用选项-x。
请注意最后两个命令中X的区别。


7. 删除本地和远程Git分支

删除本地分支：

$ git branch --delete --force <branchName>
或者使用选项-D作为简写：

$ git branch -D
删除远程分支：


$ git push origin --delete <branchName>
建议：要想更好地掌握Git的用法，请仔细阅读Git官方文档。